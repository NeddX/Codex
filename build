#!/bin/bash
# Auto-generated by ccpinit

clear
echo "Build started"

if [ -z "$CC" ]; then
	export CC=$(which gcc)
	export CXX=$(which g++)
fi

kernel=$(uname -s | tr '[:upper:]' '[:lower:]')
arch=$(uname -m | tr '[:upper:]' '[:lower:]')
platform="$kernel-$arch"
build_conf="Debug"
cpwd=$pwd

if [ -z "$1" ]; then
    build_conf="Debug"
elif [[ "$1" == "clean" ]]; then
    if [ -d "builds/$platform" ]; then
        cmake --build -B "builds/$platform" --target clean
    fi
elif [[ "$1" == "vs2022" ]]; then
	mkdir -p "builds/vs2022"
	cmake ./ -G "Visual Studio 17" -B "builds/vs2022"
	cmake --build "builds/vs2022"
	exit
else
    build_conf="$1"
fi

if [ ! -d "builds" ]; then
    echo "Configuring CMake..."
    mkdir -p "builds/$platform"
elif [ ! -d "builds/$platform" ]; then
    echo "Configuring CMake..."
    mkdir -p "builds/$platform"
fi

cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE="$build_conf" -B "builds/$platform"

echo "Building..."
cmake --build "builds/$platform"
cp "builds/$platform/compile_commands.json" ./

if [ ! -d "./bin" ]; then
    mkdir -p "./bin"
fi

echo "Build finished."
