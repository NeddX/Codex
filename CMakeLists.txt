cmake_minimum_required(VERSION 3.16)

project("Codex")

# ==================================================== # Export macros that
# describe the current platform   #
# ==================================================== #

if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
  set(CX_PLATFORM_LINUX 1 CACHE INTERNAL "")
  set(CX_PLATFORM_UNIX 1 CACHE INTERNAL "")
  set(CX_VARIABLE_PATH "${CMAKE_INSTALL_PREFIX}/share" CACHE INTERNAL "")
elseif(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
  set(CX_PLATFORM_OSX 1 CACHE INTERNAL "")
  set(CX_PLATFORM_UNIX 1 CACHE INTERNAL "")
  set(CX_VARIABLE_PATH "${CMAKE_INSTALL_PREFIX}/share" CACHE INTERNAL "")
elseif(CMAKE_SYSTEM_NAME STREQUAL "Windows")
  set(CX_PLATFORM_WINDOWS 1 CACHE INTERNAL "")
  set(CX_APP_DATA_PATH "${CMAKE_INSTALL_PREFIX}" CACHE INTERNAL "")
  set(CX_APP_DATA_VARIABLE_PATH "${CMAKE_INSTALL_PREFIX}/share" CACHE INTERNAL "")
else()
  set(CX_PLATFORM_UNKNOWN 1)
endif()

if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
  set(CX_COMPILER_GNUC 1 CACHE INTERNAL "")
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang" OR CMAKE_CXX_COMPILER_ID STREQUAL
                                                 "AppleClang")
  set(CX_COMPILER_CLANG 1 CACHE INTERNAL "")
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
  set(CX_COMPILER_MSVC 1 CACHE INTERNAL "")
else()
  set(CX_COMPILER_UNKNOWN 1 CACHE INTERNAL "")
endif()

# Determine the processor architecture
if(CMAKE_SIZEOF_VOID_P EQUAL 8)
  set(CX_WORD_SIZE_64 1 CACHE INTERNAL "")
else()
  set(CX_WORD_SIZE_32 1 CACHE INTERNAL "")
endif()

if(CMAKE_BUILD_TYPE STREQUAL "Debug")
  set(CX_BUILD_TYPE_DEBUG 1 CACHE INTERNAL "")
elseif(CMAKE_BUILD_TYPE STREQUAL "Release")
  set(CX_BUILD_TYPE_RELEASE 1 CACHE INTERNAL "")
elseif(CMAKE_BUILD_TYPE STREQUAL "Shipping")
  set(CX_BUILD_TYPE_SHIPPING 1 CACHE INTERNAL "")
endif()

# Export compile_commands.json for the LSPs.
set(CMAKE_EXPORT_COMPILE_COMMANDS on)

# Create a custom build command and a dummy target for it to copy
# compile_commands.json to the source directory for LSPs.
add_custom_command(
  OUTPUT ${CMAKE_SOURCE_DIR}/compile_commands.json
  COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_BINARY_DIR}/compile_commands.json
          ${CMAKE_SOURCE_DIR}/compile_commands.json
  DEPENDS ${CMAKE_BINARY_DIR}/compile_commands.json
  COMMENT "Copying compile_commands.json...")

add_custom_target(copy_compile_commands ALL
                  DEPENDS ${CMAKE_SOURCE_DIR}/compile_commands.json)

# Add sub projects.
add_subdirectory("Codex")

if (DEFINED CX_ENABLE_NETNT)
    add_subdirectory("NetNT")
endif()
if (DEFINED CX_ENABLE_TESTGAME)
    add_subdirectory("TestGame")
endif()
if (DEFINED CX_ENABLE_CEDITOR)
    add_subdirectory("CodexEditor")
endif()
